<?php

declare(strict_types=1);

namespace AnomRadar\Api\Reports;

use TCPDF;

/**
 * PDF Report Generator using TCPDF
 */
class PdfReportGenerator
{
    public function generate(array $scan, string $outputPath): string
    {
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

        // Document metadata
        $pdf->SetCreator('AnomRadar');
        $pdf->SetAuthor('AnomRadar Security Scanner');
        $pdf->SetTitle('Security Scan Report - ' . $scan['company_name']);
        $pdf->SetSubject('Security Scan Report');

        // Remove default header/footer
        $pdf->setPrintHeader(false);
        $pdf->setPrintFooter(false);

        // Set margins
        $pdf->SetMargins(15, 15, 15);
        $pdf->SetAutoPageBreak(true, 15);

        // Add a page
        $pdf->AddPage();

        // Title
        $pdf->SetFont('helvetica', 'B', 20);
        $pdf->Cell(0, 10, 'Security Scan Report', 0, 1, 'C');
        $pdf->Ln(5);

        // Company Info
        $pdf->SetFont('helvetica', '', 12);
        $pdf->Cell(0, 6, 'Company: ' . $scan['company_name'], 0, 1);
        $pdf->Cell(0, 6, 'Scan ID: ' . $scan['scan_id'], 0, 1);
        $pdf->Cell(0, 6, 'Date: ' . date('Y-m-d H:i:s', strtotime($scan['created_at'])), 0, 1);
        $pdf->Ln(5);

        // Summary
        $pdf->SetFont('helvetica', 'B', 14);
        $pdf->Cell(0, 8, 'Summary', 0, 1);
        $pdf->SetFont('helvetica', '', 11);
        
        $riskColor = $this->getRiskColor($scan['risk_level']);
        $pdf->SetTextColor($riskColor[0], $riskColor[1], $riskColor[2]);
        $pdf->Cell(0, 6, 'Risk Score: ' . $scan['risk_score'] . '/100 (' . strtoupper($scan['risk_level']) . ')', 0, 1);
        $pdf->SetTextColor(0, 0, 0);

        $domains = implode(', ', $scan['domains'] ?: ['None']);
        $pdf->Cell(0, 6, 'Domains: ' . $domains, 0, 1);
        $pdf->Cell(0, 6, 'Total Findings: ' . count($scan['findings']), 0, 1);
        $pdf->Ln(5);

        // Findings
        $pdf->SetFont('helvetica', 'B', 14);
        $pdf->Cell(0, 8, 'Findings', 0, 1);

        if (empty($scan['findings'])) {
            $pdf->SetFont('helvetica', '', 11);
            $pdf->Cell(0, 6, 'No findings to report.', 0, 1);
        } else {
            foreach ($scan['findings'] as $finding) {
                $this->addFinding($pdf, $finding);
            }
        }

        // Footer
        $pdf->Ln(10);
        $pdf->SetFont('helvetica', 'I', 9);
        $pdf->SetTextColor(100, 100, 100);
        $pdf->Cell(0, 5, 'Generated by AnomRadar Security Scanner - ' . date('Y'), 0, 1, 'C');
        $pdf->Cell(0, 5, 'This report is confidential and should only be shared with authorized personnel.', 0, 1, 'C');

        // Save PDF
        $filename = "report_{$scan['scan_id']}_" . time() . ".pdf";
        $filepath = $outputPath . '/' . $filename;
        $pdf->Output($filepath, 'F');

        return $filepath;
    }

    private function addFinding(TCPDF $pdf, array $finding): void
    {
        $pdf->Ln(3);
        
        // Severity badge
        $color = $this->getRiskColor($finding['severity']);
        $pdf->SetFillColor($color[0], $color[1], $color[2]);
        $pdf->SetTextColor(255, 255, 255);
        $pdf->SetFont('helvetica', 'B', 9);
        $pdf->Cell(25, 5, strtoupper($finding['severity']), 0, 0, 'C', true);
        $pdf->SetTextColor(0, 0, 0);
        $pdf->Ln();

        // Title
        $pdf->SetFont('helvetica', 'B', 11);
        $pdf->MultiCell(0, 5, $finding['title'], 0, 'L');

        // Description
        $pdf->SetFont('helvetica', '', 10);
        $pdf->MultiCell(0, 5, 'Description: ' . $finding['description'], 0, 'L');

        // Recommendation
        if (!empty($finding['recommendation'])) {
            $pdf->MultiCell(0, 5, 'Recommendation: ' . $finding['recommendation'], 0, 'L');
        }

        $pdf->Ln(2);
    }

    private function getRiskColor(string $level): array
    {
        return match($level) {
            'critical' => [220, 53, 69],
            'high' => [253, 126, 20],
            'medium' => [255, 193, 7],
            'low' => [40, 167, 69],
            'info' => [23, 162, 184],
            default => [108, 117, 125],
        };
    }
}
